@startuml MultipleRequestsTimeout

'──────────────────────── Visual settings ────────────────────────
skinparam ParticipantPadding 120 '
skinparam participant {
    BackgroundColor #053671
    BorderColor     #1e1e1e
    FontColor       white
}
skinparam sequence {
    ArrowColor                 #1e1e1e
    LifeLineBorderColor        #1e1e1e
    LifeLineBackgroundColor    #ff9f1c
    ParticipantBorderColor     #1e1e1e
    ParticipantBackgroundColor #053671
    ParticipantFontColor       white
}

title **BSP Sequence – Multiple Requests Timeout Case**

participant "Host App"         as HA
participant "Host Cmd Layer"   as HC
participant "Host DTL Layer"   as HD
participant "Host PHY Layer"   as HP
participant "Target PHY Layer" as TP
participant "Target DTL Layer" as TD
participant "Target Cmd Layer" as TC
participant "Target App"       as TA

autonumber "<b>[0]</b>"

'─── 1) Host issues two commands ────────────────────────────────
activate HA
HA -> HC : sendCommand(cmd1)
HA -> HC : sendCommand(cmd2)
deactivate HA

activate HC
note right of HC
  • frame CRA(cmd1)  
  • frame CRA(cmd2)  
  • start timers(cmd1, cmd2)
end note

'─── 2) Wrap & send both via DTL/PHY ─────────────────────────────
HC -> HD : wrapCRA(cmd1)
HC -> HD : wrapCRA(cmd2)
deactivate HC

activate HD
note right of HD
  • SLIP+CRC(cmd1)  
  • SLIP+CRC(cmd2)
end note
HD --> HC : CRA1, CRA2
deactivate HD

activate HC
HC -> HP : sendFrame(CRA1)
HC -> HP : sendFrame(CRA2)
deactivate HC

activate HP
HP -> TP : UART bytes (CRA1)
HP -> TP : UART bytes (CRA2)
deactivate HP

'─── 3) Target handles only cmd1 initially ───────────────────────
activate TP
TP -> TD : deliverBytes() [CRA1]
deactivate TP

activate TD
note right of TD
  • decode+CRC OK(cmd1)
end note
TD -> TC : extractCRA(cmd1)
deactivate TD

activate TC
TC -> TA : deliverCommand(cmd1)
deactivate TC

activate TA
TA --> TC : sendResponse(resp1)
deactivate TA

activate TC
note right of TC
  • wrapCRA(resp1)
end note
TC -> TD : wrapCRA(resp1)
deactivate TC

activate TD
note right of TD
  • SLIP+CRC(resp1)
end note
TD -> TP : sendFrame(resp1)
deactivate TD

activate TP
TP -> HP : UART bytes (resp1)
deactivate TP

'─── 4) Host processes resp1 ────────────────────────────────────
activate HP
HP -> HD : deliverBytes() [resp1]
deactivate HP

activate HD
note right of HD
  • decode+CRC OK(resp1)
end note
HD -> HC : extractCRA(resp1)
deactivate HD

activate HC
note right of HC
  • stop timer(cmd1)
end note
HC -> HA : deliverResponse(resp1)
deactivate HC

activate HA
HA --> HC : sendACK() [for resp1]
deactivate HA

activate HC
note right of HC
  • wrapCRA(ACK1)
end note
HC -> HD : wrapCRA(ACK1)
deactivate HC

activate HD
note right of HD
  • build ACK frame1
end note
HD -> HC : ACK1
deactivate HD

activate HC
HC -> HP : sendFrame(ACK1)
deactivate HC

activate HP
HP -> TP : UART bytes (ACK1)
deactivate HP

activate TP
TP -> TD : deliverBytes() [ACK1]
deactivate TP

activate TD
note right of TD
  • extractCRA(ACK1)  
  • stop ACK-timer(cmd1)
end note
deactivate TD

'─── 5) ACK for cmd2 never arrives (we show a dotted X) ─────────
TD --x HC : deliverBytes() [ACK2]\n<color:red>X no ACK(cmd2)</color>
deactivate TD

'─── 6) Timer for cmd2 expires & host retries ────────────────────
activate HC
note right of HC
  • Response-timer(cmd2) expired  
  • retry sendCommand(cmd2)
end note
HC -> HD : wrapCRA(cmd2) «retry»
deactivate HC

activate HD
note right of HD
  • SLIP+CRC(cmd2 retry)
end note
HD --> HC : CRA2 (retry)
deactivate HD

activate HC
HC -> HP : sendFrame(CRA2 retry)
deactivate HC

activate HP
HP -> TP : UART bytes (CRA2 retry)
deactivate HP

'─── 7) Target processes cmd2 retry ──────────────────────────────
activate TP
TP -> TD : deliverBytes() [CRA2 retry]
deactivate TP

activate TD
note right of TD
  • decode+CRC OK(cmd2 retry)
end note
TD -> TC : extractCRA(cmd2)
deactivate TD

activate TC
TC -> TA : deliverCommand(cmd2)
deactivate TC

activate TA
TA --> TC : sendResponse(resp2)
deactivate TA

activate TC
note right of TC
  • wrapCRA(resp2)
end note
TC -> TD : wrapCRA(resp2)
deactivate TC

activate TD
note right of TD
  • SLIP+CRC(resp2)
end note
TD -> TP : sendFrame(resp2)
deactivate TD

activate TP
TP -> HP : UART bytes (resp2)
deactivate TP

'─── 8) Host processes resp2 ────────────────────────────────────
activate HP
HP -> HD : deliverBytes() [resp2]
deactivate HP

activate HD
note right of HD
  • decode+CRC OK(resp2)
end note
HD -> HC : extractCRA(resp2)
deactivate HD

activate HC
note right of HC
  • stop timer(cmd2)
end note
HC -> HA : deliverResponse(resp2)
deactivate HC

activate HA
HA --> HC : sendACK() [for resp2]
deactivate HA

activate HC
note right of HC
  • wrapCRA(ACK2)
end note
HC -> HD : wrapCRA(ACK2)
deactivate HC

activate HD
note right of HD
  • build ACK frame2
end note
HD -> HC : ACK2
deactivate HD

activate HC
HC -> HP : sendFrame(ACK2)
deactivate HC

activate HP
HP -> TP : UART bytes (ACK2)
deactivate HP

activate TP
TP -> TD : deliverBytes() [ACK2]
deactivate TP

activate TD
note right of TD
  • extractCRA(ACK2)  
  • stop ACK-timer(cmd2)
end note
deactivate TD

@enduml
